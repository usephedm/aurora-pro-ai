name: Aurora Pro AI - CI/CD Pipeline

on:
  push:
    branches: [ main, develop, aurora-optimization-v2 ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      run_performance_tests:
        description: 'Run Performance Tests'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security
  code-quality:
    name: Code Quality & Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        pip install -r requirements.txt
    
    - name: Code Formatting Check
      run: |
        black --check --diff .
        isort --check-only --diff .
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type Check with mypy
      run: mypy aurora_pro/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Security Check with Bandit
      run: bandit -r aurora_pro/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Dependency Security Check
      run: safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # Unit and Integration Tests
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          tesseract-ocr \
          tesseract-ocr-eng \
          chromium-browser \
          chromium-chromedriver \
          xvfb
    
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov pytest-xvfb
        pip install -r requirements.txt
    
    - name: Configure Test Environment
      run: |
        mkdir -p logs cache
        cp aurora_pro/config/operator_enabled.yaml.example aurora_pro/config/operator_enabled.yaml
        export DISPLAY=:99
        export AURORA_TEST_MODE=true
        export REDIS_URL=redis://localhost:6379
    
    - name: Run Unit Tests
      run: |
        pytest tests/unit/ -v --cov=aurora_pro --cov-report=xml --cov-report=html
      env:
        DISPLAY: :99
    
    - name: Run Integration Tests
      run: |
        xvfb-run -a pytest tests/integration/ -v --cov-append --cov=aurora_pro
      env:
        REDIS_URL: redis://localhost:6379
    
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}

  # Performance Benchmarks
  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event.inputs.run_performance_tests == 'true' || github.event_name != 'workflow_dispatch'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark locust
    
    - name: Run Performance Tests
      run: |
        pytest tests/performance/ -v --benchmark-json=benchmark-results.json
    
    - name: Load Testing
      run: |
        locust --headless --users 50 --spawn-rate 5 --run-time 60s --host http://localhost:8000
      continue-on-error: true
    
    - name: Upload Benchmark Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark-results.json

  # Docker Build and Security Scan
  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [code-quality, test-suite]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and Push Docker Images
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy Container Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, performance-tests]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_environment == 'staging')
    environment:
      name: staging
      url: https://aurora-pro-staging.example.com
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Deploy to Staging Environment
      run: |
        echo "Deploying Aurora Pro AI to staging..."
        # Add actual deployment commands here
        # docker-compose -f docker/docker-compose.staging.yml up -d
    
    - name: Run Smoke Tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands
    
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#aurora-pro-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_environment == 'production')
    environment:
      name: production
      url: https://aurora-pro.example.com
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Blue-Green Deployment
      run: |
        echo "Executing blue-green deployment to production..."
        # Add blue-green deployment logic
    
    - name: Health Check
      run: |
        echo "Performing production health checks..."
        # Add health check commands
    
    - name: Rollback on Failure
      if: failure()
      run: |
        echo "Deployment failed, rolling back..."
        # Add rollback commands

  # Release Management
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test-suite, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate Release Notes
      id: release-notes
      run: |
        # Generate changelog since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGES=$(git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges)
        else
          CHANGES=$(git log --pretty=format:"- %s" --no-merges | head -20)
        fi
        echo "CHANGES<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Aurora Pro AI v${{ github.run_number }}
        body: |
          ## 🚀 Aurora Pro AI Release v${{ github.run_number }}
          
          ### What's Changed
          ${{ steps.release-notes.outputs.CHANGES }}
          
          ### 📊 Test Results
          - ✅ All unit tests passed
          - ✅ Integration tests completed
          - ✅ Security scans clean
          - ✅ Performance benchmarks met
          
          ### 🐳 Docker Images
          - `ghcr.io/${{ github.repository }}:v${{ github.run_number }}`
          - Multi-architecture support (amd64, arm64)
          
          ### 📚 Documentation
          Full documentation available at: [Aurora Pro AI Docs](https://github.com/${{ github.repository }})
        draft: false
        prerelease: false

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, create-release]
    if: always()
    
    steps:
    - name: Clean up old artifacts
      run: |
        echo "Cleaning up old build artifacts..."
        # Add cleanup commands
    
    - name: Update Project Status
      run: |
        echo "Pipeline completed successfully!"
        echo "Aurora Pro AI deployment status: ${{ job.status }}"
