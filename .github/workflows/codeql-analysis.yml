name: "CodeQL Security Analysis"

on:
  push:
    branches: [ "main", "develop", "aurora-optimization-v2" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '25 6 * * 1'  # Weekly on Mondays
  workflow_dispatch:

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality
        # Enhanced queries for Aurora Pro AI security analysis
        config: |
          name: "Aurora Pro AI Security Config"
          queries:
            - uses: security-and-quality
            - uses: security-extended
          paths-ignore:
            - "tests/"
            - "docs/"
            - "*.md"

    - name: Set up Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f aurora_pro/requirements.txt ]; then pip install -r aurora_pro/requirements.txt; fi

    - name: Set up Node.js
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Node.js dependencies
      if: matrix.language == 'javascript'
      run: |
        if [ -f package.json ]; then npm ci; fi
        if [ -f aurora_pro/package.json ]; then cd aurora_pro && npm ci; fi

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true
        # Custom analysis for Aurora Pro AI patterns
        checkout_path: ${{ github.workspace }}

    - name: Generate Security Summary
      if: always()
      run: |
        mkdir -p security-reports
        cat > security-reports/aurora-pro-security-${{ matrix.language }}.md << EOF
        # Aurora Pro AI Security Analysis Report
        
        **Language**: ${{ matrix.language }}  
        **Timestamp**: $(date -u)  
        **Repository**: ${{ github.repository }}  
        **Commit**: ${{ github.sha }}  
        **Branch**: ${{ github.ref_name }}  
        
        ## Analysis Scope
        - Multi-agent orchestration security
        - API endpoint vulnerability scanning  
        - Input validation and sanitization
        - Authentication and authorization flows
        - Data handling and encryption
        - System command execution safety
        
        ## Key Security Features Validated
        ‚úÖ Operator authorization gating  
        ‚úÖ Audit logging integrity  
        ‚úÖ Sandboxed plugin execution  
        ‚úÖ SSRF protection mechanisms  
        ‚úÖ Input sanitization (PyAutoGUI, CLI)  
        ‚úÖ Secure subprocess handling  
        
        For detailed vulnerability findings, check the **Security** tab in GitHub.
        
        ---
        *Generated by Aurora Pro AI CodeQL Analysis*
        EOF

    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: aurora-pro-security-reports
        path: security-reports/
        retention-days: 90

    - name: Comment on PR with Security Status
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('Aurora Pro AI Security Analysis'));
          
          const body = `## üõ°Ô∏è Aurora Pro AI Security Analysis
          
          **Language**: ${{ matrix.language }}  
          **Status**: ${{ job.status == 'success' && '‚úÖ Passed' || '‚ùå Issues Found' }}  
          **Timestamp**: ${new Date().toISOString()}  
          
          ${job.status == 'success' 
            ? '‚úÖ No security vulnerabilities detected in this language analysis.' 
            : '‚ö†Ô∏è  Security issues detected. Please review the Security tab for details.'}
          
          For detailed results, check the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning).
          `;
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
